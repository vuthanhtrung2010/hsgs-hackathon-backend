// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ma/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CanvasUser {
  id        Int      @id @default(autoincrement())
  studentId String // Canvas user ID
  name      String
  shortName String
  courseId  String // Canvas course ID
  rating    Float    @default(1500)
  quizzes   Quiz[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, courseId])
  @@index([courseId])
  @@index([studentId])
  @@map("users")
}

model Question {
  id              Int      @id @default(autoincrement())
  quizId          String // Canvas quiz ID
  quizName        String
  courseId        String // Canvas course ID
  types           String[] // Array of quiz types (e.g., ["Bài tập", "Kiểm tra"])
  lesson          String? // Lesson name
  difficulty      Float?  // Difficulty level
  class           Int?    // Class number
  rating          Float    @default(1500)
  submissionCount Int      @default(0)
  quizzes         Quiz[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([quizId, courseId])
  @@index([courseId])
  @@index([quizId])
  @@map("questions")
}

model Quiz {
  id           Int      @id @default(autoincrement())
  userId       Int
  questionId   Int
  score        Float
  maxScore     Float
  submittedAt  DateTime
  ratingChange Float    @default(0)
  createdAt    DateTime @default(now())

  user     CanvasUser @relation(fields: [userId], references: [id], onDelete: Cascade)
  question Question   @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@unique([userId, questionId])
  @@index([userId])
  @@index([questionId])
  @@map("quizzes")
}

model Course {
  id        String   @id // Canvas course ID
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("courses")
}

model Class {
  id        String   @id @default(cuid())
  name      String
  students  String[] // Array of student names
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("classes")
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("announcements")
}

model SyncHistory {
  id        Int      @id @default(autoincrement())
  courseId  String // Canvas course ID
  lastSync  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId])
  @@map("sync_history")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
